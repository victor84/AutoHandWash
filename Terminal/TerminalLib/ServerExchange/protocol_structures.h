#pragma once
#include "stdafx.h"
#include "raw_data_warappers.h"
#include "..\Logic\ServicesNames.h"

/*!
 * \file protocol_structures.h
 *
 * \author Victor Mulika
 * \date 01 Март 2015
 *
 * Структуры для обмена данными с сервером
 */

namespace server_exchange
{
// результат преобразования данных
enum class e_convert_result
{
	invalid_data,	// неверные данные
	success,		// успех
	empty_data		// пустой блок данных
};

// начало пакета
const uint16_t begin_bytes = 0xf00d;

// конец пакета
const uint16_t end_bytes = 0x1013;

// тип пакета
enum class e_packet_type : byte
{
	unknown = 0,	// неизвестно
	id = 1,			// пакет идентификации терминала
	counters,		// показания счётчиков
	settings,		// настройки
	confirmation,   // подтверждение
	log,            // лог
	refill_cache,	// пополнить баланс
	prize,          // приз
	terminal_state	// состояние терминала
};

/******************************************************************************************
Структура транспортного пакета
-------------------------------------------------------------------------------------
Название						|	Длина	|	Тип		|	Фиксированное значение	|
-------------------------------------------------------------------------------------
Начало пакета					|	2		|	USHORT	|			0xF00D			|
Тип пакета						|	1		|	BYTE	|							|
Длина данных					|	4		|	UINT	|							|
Данные							|1...65536	| 	ARRAY	|							|
Окончание пакета				|	2		|	USHORT	|			0x1013			|
-------------------------------------------------------------------------------------
******************************************************************************************/
// транспортный пакет, в котором передаются данные
struct tag_transport_packet 
{
	uint16_t								begin;		// начальные байты 0x0d и 0xf0
	e_packet_type							type;		// тип пакета
	uint32_t								length;		// длина данных (без учёта последних байт)
	tools::data_wrappers::_tag_data_managed	data;		// даннные
	uint16_t								end;		// окончание пакета

	tag_transport_packet()
		: begin (begin_bytes)
		, type (e_packet_type::unknown)
		, length (0)
		, end (end_bytes)
	{

	}
};

/******************************************************************************************
Структура пакета идентификации
-------------------------------------------------------------------------------------
Название						|	Длина	|	Тип		|	Фиксированное значение	|
-------------------------------------------------------------------------------------
Название группы					|	20		|CHAR ARRAY	|							|
Название терминала				|	20		|CHAR ARRAY	|							|
-------------------------------------------------------------------------------------
******************************************************************************************/
#pragma pack(push, 1)
// пакет идентификации терминала
struct tag_identification_packet
{
	wchar_t	group_name[20];		// название группы терминалов
	wchar_t	terminal_name[20];	// название терминала

	tag_identification_packet()
	{
		clear();
	}

	void clear()
	{
		ZeroMemory(this, sizeof(tag_identification_packet));
	}
};
#pragma pack(pop)

/******************************************************************************************
Структура пакета с показаниями счётчиков
-------------------------------------------------------------------------------------
Название						|	Длина	|	Тип		|	Фиксированное значение	|
-------------------------------------------------------------------------------------
Дата и время					|	8		|ULONGLONG	|							|
Общий вход						|	4		|	UINT	|							|
Текущий баланс					|	4		|	UINT	|							|
Состояние (работает, простой	|	1		|	BYTE	|							|
сломана)						-----------------------------------------------------
Время работы услуг:				-----------------------------------------------------
Вода по давлением				|	4		|	UINT	|							|
Вода без давления				|	4		|	UINT	|							|
Пена							|	4		|	UINT	|							|
Воск							|	4		|	UINT	|							|
От мошек						|	4		|	UINT	|							|
Пылесос							|	4		|	UINT	|							|
Воздух							|	4		|	UINT	|							|
Осмос							|	4		|	UINT	|							|
-------------------------------------------------------------------------------------
******************************************************************************************/


#pragma pack(push, 1)
// пакет с показаниями счётчиков
struct tag_counters_packet
{
	uint64_t			date_time;				// Дата и время сообщения
	uint32_t			total_cache;			// Общий вход
	uint32_t			current_cache;			// Текущий баланс
	logic::e_terminal_state	state;					// Состояние (работает, простой, сломана)
	uint32_t			pressurized_water;		// Вода по давлением
	uint32_t			water_without_pressure;	// Вода без давления
	uint32_t			foam;					// Пена	
	uint32_t			wax;					// Воск	
	uint32_t			vacuum_cleaner;			// Пылесос	
	uint32_t			air;					// Воздух
	uint32_t			osmosis;				// Осмос

	tag_counters_packet()
	{
		clear();
	}

	void clear()
	{
		ZeroMemory(this, sizeof(tag_counters_packet));
	}
};
#pragma pack(pop)

/******************************************************************************************
Структура пакета с настройками
-----------------------------------------------------------------------------------------
Название							|	Длина	|	Тип		|	Фиксированное значение	|
-----------------------------------------------------------------------------------------
Состояние (работает, простой		|	  1		|	BYTE	|							|
сломана)							-----------------------------------------------------
Импульс купюроприёмника				|	  1		|	BYTE	|							|
Импульс монетоприёмника				|	  1		|	BYTE	|							|
Время простоя						|	  1		|	BYTE	|							|
Стоимость минуты простоя			|	  2		|	USHORT	|							|
Пауза перед показом рекламы			|	  1		|	BYTE	|							|
Защита от замерзания				|	  4		|	UINT	|							|
Сумма для выдачи дисконтной карты	|	  4		|	UINT	|							|
Стоимость работы услуг:				-----------------------------------------------------
Вода по давлением					|	  4		|	UINT	|							|
Вода без давления					|	  4		|	UINT	|							|
Пена								|	  4		|	UINT	|							|
Воск								|	  4		|	UINT	|							|
Пылесос								|	  4		|	UINT	|							|
Воздух								|	  4		|	UINT	|							|
Осмос								|	  4		|	UINT	|							|
-------------------------------------------------------------------------------------
******************************************************************************************/
#pragma pack(push, 1)
// Пакет с настройками
struct tag_settings_packet
{
	logic::e_terminal_state	state;						// Состояние (работает, простой, сломана)
	byte				bill_acceptor_impulse;		// Импульс купюроприёмника		
	byte				coin_acceptor_impulse;		// Импульс монетоприёмника		
	byte				free_idle_time;				// Время простоя				
	uint16_t			idle_time_cost;				// Стоимость минуты простоя	
	byte				pause_before_advertising;	// Пауза перед показом рекламы
	uint32_t			frost_protection_value;		// Защита от замерзания
	uint32_t			discount_card_condition;	// Сумма для выдачи дисконтной карты
	// стоимость услуг
	uint32_t			pressurized_water;			// Вода под давлением
	uint32_t			water_without_pressure;		// Вода без давления
	uint32_t			foam;						// Пена	
	uint32_t			wax;						// Воск	
	uint32_t			vacuum_cleaner;				// Пылесос	
	uint32_t			air;						// Воздух
	uint32_t			osmosis;					// Осмос

	tag_settings_packet()
	{
		clear();
	}

	void clear()
	{
		ZeroMemory(this, sizeof(tag_settings_packet));
	}
};
#pragma pack(pop)

/******************************************************************************************
Структура пакета подтверждения
-------------------------------------------------------------------------------------
Название						|	Длина	|	Тип		|	Фиксированное значение	|
-------------------------------------------------------------------------------------
Тип пакета						|	1		|	BYTE	|							|
Статус обработки				|	1		|	BYTE	|							|
-------------------------------------------------------------------------------------
******************************************************************************************/

// результат обработки пакета
enum class e_processing_result : byte
{
	success = 0,	// пакет успешно обработан
	failed			// не удалось обработать пакет
};

#pragma pack(push, 1)
struct tag_confirmation_packet
{
	e_packet_type		packet_type;	// тип пакета
	e_processing_result	result;			// результат обработки

	tag_confirmation_packet()
	{
		clear();
	}

	void clear()
	{
		ZeroMemory(this, sizeof(tag_confirmation_packet));
	}
};
#pragma pack(pop)

/******************************************************************************************
Структура пакета записи лога
-------------------------------------------------------------------------------------
Название						|	Длина	|	Тип		|	Фиксированное значение	|
-------------------------------------------------------------------------------------
Дата							|	8		|	ULONG	|							|
Тип записи						|	1		|	BYTE	|							|
Длина записи					|	2		|	USHORT	|							|
Текст записи					|	2-32768	|	WCHAR[]	|							|
-------------------------------------------------------------------------------------
******************************************************************************************/
// тип записи лога
enum class e_log_record_type : byte
{
	error = 0,		// ошибка
	warning = 1,	// предупреждение
	message = 2		// сообщение
};

#pragma pack(push, 1)
// запись лога
struct tag_log_record_packet
{
	uint64_t								date_time;	// Дата		
	e_log_record_type						type;		// Тип записи	
	uint16_t								length;		// Длина записи
	tools::data_wrappers::_tag_data_managed	text;		// Текст записи

	tag_log_record_packet()
	{
		clear();
	}

	void clear()
	{
		date_time = 0;
		type = e_log_record_type::error;
		length = 0;
	}
};
#pragma pack(pop)

/******************************************************************************************
Структура пакета пополнения баланса
-------------------------------------------------------------------------------------
Название						|	Длина	|	Тип		|	Фиксированное значение	|
-------------------------------------------------------------------------------------
Сумма для пополнения			|	2		|	USHORT	|							|
-------------------------------------------------------------------------------------
******************************************************************************************/
#pragma pack(push, 1)
// пополнение баланса
struct tag_refill_cache_packet
{
	uint16_t cache;	// сумма для пополнения в рублях
};
#pragma pack(pop)

/******************************************************************************************
Структура пакета приза
-------------------------------------------------------------------------------------
Название						|	Длина	|	Тип		|	Фиксированное значение	|
-------------------------------------------------------------------------------------
Размер приза					|	2		|	USHORT	|							|
-------------------------------------------------------------------------------------
******************************************************************************************/
#pragma pack(push, 1)
// приз
struct tag_prize_packet
{
	uint16_t prize_size;	// размер приза
};
#pragma pack(pop)

/******************************************************************************************
Структура блокировки/разблокировки терминала
-------------------------------------------------------------------------------------
Название						|	Длина	|	Тип		|	Фиксированное значение	|
-------------------------------------------------------------------------------------
Статус блокировки				|	1		|	BYTE	|							|
-------------------------------------------------------------------------------------
******************************************************************************************/
#pragma pack(push, 1)
// состояние терминала
struct tag_terminal_state_packet
{
	logic::e_terminal_state state;	// Состояние (работает, простой, сломана)
};
#pragma pack(pop)

}



